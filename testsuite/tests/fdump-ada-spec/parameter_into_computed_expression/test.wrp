import ada.wrappers;
import ada.transformations;

walk wrap_ada_specs ();

match DefiningName (x"(?<a>.*)_h")
wrap w_DefiningName ("\e<a>_Wrapped");

match ParamSpec(x"arr") and parent (sb: SubpDecl()) and child (te: TypeExpr ())
wrap w: w_ParamSpecCall (
   type_expr => "in out Integer_Array",
   pre_call_decl => defer ("""\e<sb.tmp ("local")> : aliased \e<te.child (TypeExpr ())> with Address => \e<w.name>'Address, Import;"""),
   actual_value => sb.tmp ("local") & "'Access"
);


match DefiningName (x"(?<a>.*)_h") do
   wrap w_DefiningName ("\e<a>_Wrapped");

   match p: parent (PackageDecl ()).wrapper (w_PackageDecl ())
   pick p weave (spec_content => "type Integer_Array is array (Integer range <>) of Integer;\n");
end;

match ParamSpec(x"length")
walk parameter_into_computed_expression ("Arr'Length");
