import ada.wrappers;
import ada.transformations;

walk wrap_ada_specs ();

match DefiningName (x"(?<a>.*)_h") do
   wrap w_DefiningName ("\e<a>_Wrapped");

   match p: parent (PackageDecl ()).wrapper (w_PackageDecl ()) do
      pick p weave (spec_content => "type Ptr is new System.Address;\n");

      match u: p.parent (w_Unit ()) do
         match not u.child (w_WithClause (ref ("System")))
         pick u.child (new (w_WithClause (ref => "System")));
      end;
   end;
end;

match SubpDecl (x"return System.Address") or ParamSpec (x"System.Address")
walk into_binary_compatible ("Ptr");
