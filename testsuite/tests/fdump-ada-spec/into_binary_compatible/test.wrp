import ada.wrappers;
import ada.transformations;

wrap wrap_ada_specs ();

match DefiningName ("(?<a>.*)_h") {
   wrap w_DefiningName ("\e<a>_Wrapped");

   match p: parent (PackageDecl ()).template (w_PackageDecl ()) {
      pick p weave (spec_content => "type Ptr is new System.Address;\n");

      match u: p.parent (w_Unit ()) {
         match not u.child (w_WithClause (ref ("System")))
         pick u.child (new (w_WithClause (ref => "System")));
      }
   } 
}

match SubpDecl ("return System.Address") or ParamSpec ("System.Address")
wrap into_binary_compatible ("Ptr");
