template MyEntity do
    var name : text;
end;

template SubEntity do
    var name : text;
end;

match Entity ()
pick new (MyEntity ("E1"));

match Entity ()
pick child (new (SubEntity ("E2")));

match Entity () and x: new (MyEntity ("E3"))
pick x
wrap SubEntity ("SubE3");

match Entity ()
pick new (MyEntity ("E4"))
wrap SubEntity ("SubE4");

match Entity() and x: (Entity ("E5") or new (MyEntity ("E5")))
pick x
wrap SubEntity ("SubE5");

match Entity () and x: child (Entity ("E6") or new (MyEntity ("E6")))
pick x 
wrap SubEntity ("SubE6");

match Entity ()
pick child (Entity ("E7") or new (MyEntity ("E7"))) 
wrap SubEntity ("SubE7");

match MyEntity ()
weave standard.out (@ & "MyEntity: \e<name>\n");

match SubEntity ()
weave standard.out (@ & "SubEntity: \e<name>\n");

match s: SubEntity (parent (e: Entity ()))
weave standard.out (@ & "SubEntity: \e<s.name>, parent Entity: \e<e.f_name>\n");

match e: MyEntity (wrapper (s: SubEntity ()))
weave standard.out (@ & "MyEntity: \e<e.name>, template SubEntity: \e<s.name>\n");
