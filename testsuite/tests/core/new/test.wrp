template MyEntity {
    var name : text;
}

template SubEntity {
    var name : text;
}

match Entity ()
wrap new (MyEntity ("E1"));

match Entity ()
wrap child (new (SubEntity ("E2")));

match Entity () and x: new (MyEntity ("E3"))
wrap x with SubEntity ("SubE3");

match Entity ()
wrap new (MyEntity ("E4")) with SubEntity ("SubE4");

match Entity() and x: (Entity ("E5") or new (MyEntity ("E5")))
wrap x with SubEntity ("SubE5");

match Entity () and x: child (Entity ("E6") or new (MyEntity ("E6")))
wrap x with SubEntity ("SubE6");

match Entity ()
wrap child (Entity ("E7") or new (MyEntity ("E7"))) with SubEntity ("SubE7");

match MyEntity ()
weave with standard.out ("MyEntity: \e<name>\n");

match SubEntity ()
weave with standard.out ("SubEntity: \e<name>\n");

match s: SubEntity (parent (e: Entity ()))
weave with standard.out ("SubEntity: \e<s.name>, parent Entity: \e<e.f_name>\n");

match e: MyEntity (template (s: SubEntity ()))
weave with standard.out ("MyEntity: \e<e.name>, template SubEntity: \e<s.name>\n");
