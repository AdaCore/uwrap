template main do
    var txt : text;
end;

match Entity () do
    match f_name ("A")
    wrap main ("FIRST");

    match f_name ("B")
    wrap main ("SECOND");
end;

match txt ("FIRST")
weave standard.out (@ & "(1) FIRST \e<self.origin.f_name>\n");

match main () and not txt ("FIRST")
weave standard.out (@ & "(1) NOT FIRST \e<self.origin.f_name>\n");

match txt ("SECOND")
weave standard.out (@ & "(1) SECOND \e<self.origin.f_name>\n");

match main () and not txt ("SECOND")
weave standard.out (@ & "(1) NOT SECOND \e<self.origin.f_name>\n");

match main (txt ("FIRST"))
weave standard.out (@ & "(2) FIRST \e<self.origin.f_name>\n");

match main (not txt ("FIRST"))
weave standard.out (@ & "(2) NOT FIRST \e<self.origin.f_name>\n");

match main (txt ("SECOND"))
weave standard.out (@ & "(2) SECOND \e<self.origin.f_name>\n");

match main (not txt ("SECOND"))
weave standard.out (@ & "(2) NOT SECOND \e<self.origin.f_name>\n");