import a.x;

template base_template do
    var content : text;
end;

match Entity () do
    match (f_name (x"A"))
    wrap x.t_in_x ("x.t_in_x (\e<f_name>)\n");

    match (f_name (x"B"))
    wrap t_in_x ("a.x.t_in_x (\e<f_name>)\n");

    match (f_name (x"B"))
    wrap a.b.y.t_in_y ("a.b.y.t_in_y (\e<f_name>)\n");

    match (f_name (x"A"))
    wrap base_template ("base_template (\e<f_name>)\n");
end;

match base_template ()
weave standard.out (@ & "base_template = \e<self.content>");

match x.t_in_x ()
weave standard.out (@ & "x.t_in_x = \e<self.content>");

match a.x.t_in_x ()
weave standard.out (@ & "a.x.t_in_x = \e<self.content>");

match a.b.y.t_in_y ()
weave standard.out (@ & "a.b.y.t_in_y = \e<self.content>");

match a.c.z.t_in_z ()
weave standard.out (@ & "a.c.z.t_in_z = \e<self.content>");

match t_in_x ()
weave standard.out (@ & "a.x.t_in_x = \e<self.content>");
