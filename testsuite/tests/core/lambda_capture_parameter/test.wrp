template w_Entity do
   var a : text;
   var b : text;
   var c : text;
   var d : text;
   var txt : text;
end;

template x pick origin do
   var c: object;

   wrap w: w_Entity (
     a => defer (c.wrapper (w_Entity ()).txt),
     b => defer ("\e<c.f_name>"),
     c => defer (to_lower (c)),
     d => defer (c)
   );

   # also check wrap c: w_Entity
end;

match Entity () and child (c: Entity ())
wrap x (c);

match Entity ()
weave w_Entity (txt => f_name);

match w_Entity ()
weave standard.out ("\e<self.origin> {a, b, c, d} = \e<a>, \e<b>, \e<c>, \e<d>\n");
