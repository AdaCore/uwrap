import proxy.proxy;
import cs.wrappers;

template generate_proxy2cs pick origin do
   match not parent ()
   wrap w: w_Unit (name => child (name ("name")).value);

   match parent (\ name ("functions"))
   do
      wrap n: w_FunctionCall (
         name => child (\ name ("name")).value,
         returned_type => child (\ name ("type")).value,
         call_stmt => defer (child (\ name ("symbol")).value & "(" 
            & n.child (w: w_ParamCall ()).fold (c : "", c: (c & w.name), c: (c & ", ")) & ");"),
         static => "static");

      wrap w_DllImportFunction (
         name => child (\ name ("symbol")).value,
         returned_type => child (\ name ("type")).value,
         static => "static");
   end;

   match parent (\ name ("parameters")) do
      wrap w_ParamCall (
         name => child (\ name ("name")).value,
         type => "int"
      );
   end;
end;
