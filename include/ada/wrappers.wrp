template w_Ada {
  
}

template w_Unit extends w_Ada {
   var spec : text;
   var body : text;

   var body_with_clauses : text;
   var body_use_clauses : text;

   var spec_text : pattern ("""
   \e<spec>
   """);

   var body_text : pattern ("""
   \e<body_with_clauses>
   \e<body_use_clauses>

   \e<body>
   """);
}

template w_NamedEntity extends w_Ada {
  var name : text;
  var original_name : text;
}

template w_WithClause extends w_Ada {
  var ref : text;
}

template w_PackageDecl extends w_NamedEntity {
   var spec_content : text;
   var body_content : text;

   var spec : pattern ("""
      package \e<name> is
        \e<spec_content>
      end \e<name>; 
      """);

   var body : pattern ("""
      package body \e<name> is
        \e<body_content>
      end \e<name>;
   """);
}

template w_SubpDecl extends w_NamedEntity {
   var function_or_procedure : text;
   var lparen : text;
   var rparen : text;
 
   var param_spec_list : text;
   var result_subtype_indication : text;

   var pre_call_decl : text;
   var pre_call_stmt : text;
   var call_decl_exp : text;
   var call_decl : text;
   var call_stmt : text;
   var post_call_decl : text;
   var post_call_stmt : text;

   var return_stmt : text;
   var call_assoc_list : text;
   var call : text;

   var profile : pattern ("""
   \e<function_or_procedure> \e<name> \e<lparen> \e<param_spec_list> \e<rparen>
   """); 

   var spec : pattern ("""
   \e<profile>;
   """); 

   var body : pattern ("""
   \e<profile> is
      \e<pre_call_decl>
   begin
      \e<pre_call_stmt>
      declare
         \e<call_decl>
      begin
         \e<call_stmt>
         declare
            \e<post_call_decl>
         begin
            \e<call>
         end;
      end;
   end \e<name>;
   """); 
}

template w_ReturnedSubtype extends w_Ada {
  
}

template w_ParamSpec extends w_NamedEntity {
   var formal_text : text;
   var actual_text : text;

   var pre_call_decl  : text;
   var pre_call_stmt  : text;
   var actual_value   : text;
   var post_call_decl : text;
   var post_call_stmt : text;
}

template w_DefiningName extends w_Ada {
  var name : text;
}

template w_SubtypeIndication extends w_Ada {
   var txt : text;
}

template w_TypeDecl extends w_NamedEntity {
  var component_declarations : text;
}

template w_ComponentDecl extends w_NamedEntity {
  
}

template spec_file extends standard.file {}

template body_file extends standard.file {}

visitor ada_to_wrappers () {
   match CompilationUnit () {
      wrap with w_Unit ();
   }

   match PackageDecl () 
   wrap with w_PackageDecl();
    
   match SubpDecl()
   wrap with w_SubpDecl();

   match ParamSpec() and child (s: SubtypeIndication ()) and parent (sb: SubpDecl ())
   wrap with w_ParamSpec(
      pre_call_decl => "\e<sb.tmp ('local')> : \e<p_type_expression> with Address => \e<name>'Address;\n",
      actual_value => sb.tmp ('local')
   );

   match TypeDecl ()
   wrap with w_TypeDecl ();

   match ComponentDecl ()
   wrap with w_ComponentDecl ();

   match WithClause() and child(d: DottedName ())
   wrap with w_WithClause(ref => d);

   match SubtypeIndication ()
   wrap with w_SubtypeIndication ();

   match DefiningName () {
      match parent (PackageDecl ())
      wrap with w_DefiningName (name => "\e<self>_Wrapped");

      match parent (BasicDecl () and parent (PackageDecl ()))
      wrap with w_DefiningName (name => "\e<self>");
   }
}

visitor wrappers_post_process () {
    match w_SubpDecl() and parent (p : w_PackageDecl ()) {
      match not child (w_ReturnedSubtype ())
      weave with (function_or_procedure => "procedure")
      else weave with (function_or_procedure => "function");

      weave with (
         call => "\e<origin.p_fully_qualified_name> \e<lparen> \e<call_assoc_list> \e<rparen>;"
      );

      match child (w_ParamSpec ())
      weave with (lparen => "(", rparen => ")");

      weave p with (spec_content => self.spec, body_content => self.body);
    }

    match w_ParamSpec () and parent (s : w_SubpDecl()) and child (si: w_SubtypeIndication ()) {
       # TODO need to cater for the case where the spec parameter is removed
       # (e.g. when an explicit expression is provided)
       match prev (w_ParamSpec ())
       weave with (formal_text => "; \e<name> : \e<si.txt>")
       else weave with (formal_text => "\e<name> : \e<si.txt>");

       match prev (w_ParamSpec ())
       weave with (actual_text => ", \e<actual_value>")
       else weave with (actual_text => "\e<actual_value>");

       weave s with (
          param_spec_list => formal_text,
          pre_call_decl => pre_call_decl,
          call_assoc_list => actual_text
       );
    }

    match w_ComponentDecl () and parent (t : w_TypeDecl ()) and child (si : w_SubtypeIndication ()) {
      weave t with (
         component_declarations => "\e<name> : \e<si.txt>;\n"
      );
    }

    match w_TypeDecl () and parent (p : w_PackageDecl()) {
       match origin (child (RecordTypeDef ()))
       weave p with (spec_content => """
       type \e<name> is record
          \e<component_declarations>
       end record;
       """)
       else match origin (child (t: TypeDef ())) 
       weave p with (spec_content => """
       type \e<name> is \e<t>;
       """);
    }

    match w_SubtypeIndication (o: origin (child (i: Identifier ()))) {
      match o.p_designated_type_decl.template (w: w_TypeDecl ())
      weave with (txt => w.name)
      else weave with (txt => o);
    }
    
    match p: w_PackageDecl (parent (u: w_Unit ()))
    weave u with 
        (spec => p.spec,
         body => p.body,
         body_with_clauses => "with \e<p.original_name>;",
         body_use_clauses => "use \e<p.original_name>;");

    match w_WithClause () and parent (u: w_Unit ())
    weave u with (body_with_clauses => "with \e<ref>;");

    match w_DefiningName () and parent (n: w_NamedEntity ())
    weave n with (name => self.name, original_name => n.origin.p_fully_qualified_name);

    match w_Unit () and child (p: w_PackageDecl ()) {
      wrap with spec_file (path => "\e<to_lower (p.name)>.ads", content => self.spec_text);
      wrap with body_file (path => "\e<to_lower (p.name)>.adb", content => self.body_text);
    }
}

visitor wrap_ada_specs () {
   match AdaNode ()
   wrap with ada_to_wrappers ();

   match w_Ada ()
   wrap with wrappers_post_process ();
}
