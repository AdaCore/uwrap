template w_Ada do

end;

template w_Unit extends w_Ada do
   var spec: text;
   var body: text;

   var spec_with_clauses: text;
   var spec_use_clauses: text;
   var body_with_clauses: text;
   var body_use_clauses: text;

   var spec_text: text => i"""
   \e<spec_with_clauses>
   \e<spec_use_clauses>

   \e<spec>""";

   var body_text : text => i"""
   \e<body_with_clauses>
   \e<body_use_clauses>

   \e<body>""";
end;

template w_NamedEntity extends w_Ada do
  var name: text => text (defer (child (w_DefiningName ()).name));
  var original_name: text => (match (origin (v: p_fully_qualified_name ())) pick v else pick "");
end;

template w_WithClause extends w_Ada do
  var ref: text;
end;

template w_UseClause extends w_Ada do
  var ref: text;
end;

template w_PackageDecl extends w_NamedEntity do
   var spec_content: text;
   var body_content: text;
   var stmt: text;
   var elaborate_body: text;

   var spec: text => i"""
      package \e<name> is
        \e<elaborate_body>
        \e<spec_content>
      end \e<name>;""";

   var body: text => i"""
      package body \e<name> is
        \e<body_content>
      begin
        null;
        \e<stmt>
      end \e<name>;""";
end;

template w_SubpDecl extends w_NamedEntity do
   var subp_kind: text;
   var return_spec: text;
   var lparenSpec: text;
   var rparenSpec: text;

   var lparenCall: text;
   var rparenCall: text;
 
   var param_spec_list: text;
   var result_type_expr: text => defer (child (w_TypeExpr).txt);

   var pre_call_decl: text;
   var pre_call_stmt: text;
   var call_decl_exp: text;
   var call_decl: text;
   var call_stmt: text;
   var post_call_decl: text;
   var post_call_stmt: text;

   var return_stmt: text;
   var call_assoc_list: text;
   var call: text => defer ("\e<call_name> \e<lparenCall> \e<call_assoc_list> \e<rparenCall>");
   var call_name: text;

   var profile: text => """\e<subp_kind> \e<name> \e<lparenSpec> \e<param_spec_list> \e<rparenSpec> \e<return_spec>"""; 

   var spec: text; 

   var body: text => i"""
   ---
   -- \e<name> --
   ---

   \e<profile> is
      \e<pre_call_decl>
   begin
      \e<pre_call_stmt>
      declare
         \e<call_decl>
      begin
         \e<call_stmt>
         declare
            \e<post_call_decl>
         begin
            null;
            \e<post_call_stmt>
            \e<return_stmt>
         end;
      end;
   end \e<name>;
   
   """; 
end;

template w_SubpDeclCall extends w_SubpDecl do

end;

template w_SubpDeclCallback extends w_SubpDecl do
   
end;

template w_ParamSpec extends w_NamedEntity do
   var generate_formal: text;

   var formal_text: text;
   var actual_text: text;

   var type_expr: text;

   var pre_call_decl: text;
   var pre_call_stmt: text;
   var call_decl: text;
   var call_stmt: text;
   var actual_value: text;
   var post_call_decl: text;
   var post_call_stmt: text;
   var return_stmt: text;
   var result_type_expr: text => "_";

   var mode: text;
end;

template w_ParamSpecCall extends w_ParamSpec do

end;

template w_ParamSpecCallback extends w_ParamSpec do

end;

template w_DefiningName extends w_Ada do
   var name: text;
end;

template w_TypeExpr extends w_Ada do
   var txt: text;
end;

template w_TypeDecl extends w_NamedEntity do
   var definition: text;
   var content_definition: text;
   var rep_definition: text;
   var rep_declaration: text;
   var type_kind: text;
   var aspects_declaration: text;

   var declaration: text =>
      (match origin (IncompleteTypeDecl ())
         pick "type \e<name>;"
      else match origin (SubtypeDecl ())
         pick "subtype \e<name> is \e<definition>;"
      else
         pick "type \e<name> is \e<definition>\e<aspects_declaration>;\n\e<rep_declaration>");
end;

template w_Aspect extends w_Ada do
   var txt: text;
end;

template w_EnumLiteralDecl extends w_NamedEntity do
  
end;

template w_EnumRep extends w_Ada do
   var name: text;
   var value: text;
end;

template w_ComponentDecl extends w_NamedEntity do
  
end;

template w_NumberDecl extends w_NamedEntity do
  
end;

template w_ObjectDecl extends w_NamedEntity do
  
end;

template spec_file extends standard.file do
end;

template body_file extends standard.file do
end;

template visit_EnumRepClause pick origin do
  var enum_decl: object;

  match AggregateAssoc () and child (i: Identifier ()) and child (v: IntLiteral ()) do
     match n: enum_decl.child (EnumLiteralDecl ("\e<i>")) # TODO, we should be able to write text (i) instead.
     pick n wrap w_EnumRep (name => defer (n.wrapper (w_EnumLiteralDecl ()).name), value => v);
  end;
end;

function build_identifier (from) do
   # not all identifiers are wrapped - in particular those coming from the
   # standard library are not. So differenciate here the cases where we
   # find a w_DefiningName (using the provided name) from the cases where we
   # don't.

   pick from do
      match i: self()
            and x: p_referenced_decl ()
            and t: x.child (DefiningName ()).wrapper (w_DefiningName ())
      do
         pick " " & t.name;
      else
         pick " " & i;
      end;
   end;
end;

function build_dotted_name (from) do
   pick from do
      match s: self () and c: child (DottedName ()) do
         pick build_dotted_name (c) 
            & "." 
            &  build_identifier (s.child (Identifier()));
      else
         match child (i1: Identifier() and next (i2: Identifier()))
         pick " "
            & build_identifier (i1)
            & "."
            & build_identifier (i2);
      end;
   end;
end;

function build_type_expr_gen (from) do
   pick from.child(\ true).all () do
      match d: DottedName () do
         pick build_dotted_name (self);
      elsmatch i: Identifier () do
         pick build_identifier (self);     
      elsmatch RangeSpec () do
         pick " range" & build_type_expr (self);
      elsmatch TypeAccessDef () do
         pick " access" & build_type_expr (self);
      elsmatch s: self () and SingleTokNode() do
         pick " \e<s>" & build_type_expr (self);
      elsmatch s: IndexConstraint () do
         pick " (" & build_type_expr (self) & " )";
      else
         pick build_type_expr (self);
      end;
   end;
end;

function build_type_expr (from) do
   pick build_type_expr_gen (from).all(x: true).fold ("", @ & x);
end;

template build_subprogram pick origin do
   var sb: object;

   match sb.child (f_subp_kind ("function")) and sb.child (te: TypeExpr()) do
      weave (
         subp_kind => "function",
         call_decl => """\e<self.tmp ("result_orig")> : aliased \e<te> := \e<call>;\n""",
         post_call_decl => i"""
            \e<self.tmp ("result_wrapped")> : aliased \e<result_type_expr> 
            with Address => \e<self.tmp ("result_orig")>'Address, Import;\n""",
         call_stmt => "null;", 
         return_stmt => """return \e<sb.tmp ("result_wrapped")>;""");
   else
      weave (
         call_stmt => "\e<call>;", 
         return_stmt => "null;",
         subp_kind => "procedure");
   end;
end;

template ada_to_wrappers pick origin do
   match CompilationUnit () do
      wrap w_Unit ();
   end;

   match PackageDecl () 
   wrap w_PackageDecl();
    
   match sb: (SubpDecl() or AccessToSubpDef ()) do
      do
         wrap w: w_SubpDeclCall ();
      then
         pick w weave build_subprogram (sb);
      end;
      
      do 
         wrap w: w_SubpDeclCallback();
      then 
         pick w weave build_subprogram (sb);
      end;
   end;
   
   match ParamSpec() do
      wrap w_ParamSpecCall();
      wrap w_ParamSpecCallback();

      match parent (sb: (SubpDecl () or AccessToSubpDef ())) do
         wrap n: w_ParamSpecCall (
            type_expr => defer (n.child (w_TypeExpr()).txt),
            pre_call_decl => """\e<sb.tmp ("local")> : aliased \e<p_type_expression> with Address => \e<n.name>'Address, Import;\n""",
            actual_value => sb.tmp ("local")
         );

         wrap n: w_ParamSpecCallback (
            type_expr => p_type_expression,
            pre_call_decl => """\e<sb.tmp ("local")> : aliased \e<defer (n.child (w_TypeExpr()).txt)> with Address => \e<n.name>'Address, Import;\n""",
            actual_value => sb.tmp ("local")
         );
      end;
   end;
   
   match BaseTypeDecl () 
   wrap w_TypeDecl ();

   match TypeDecl () and child (EnumTypeDef ()) do
      wrap w_TypeDecl (
         type_kind => "enumeration"
      );

      match s: self () and r: p_get_enum_representation_clause ()
      pick r.child().all () wrap visit_EnumRepClause (s);
   end;

   match EnumLiteralDecl ()
   wrap w_EnumLiteralDecl();

   match ComponentDecl ()
   wrap w_ComponentDecl ();

   match WithClause() and child(d: Name ())
   wrap w_WithClause(ref => d);

   match UseClause() and child(d: Name ())
   wrap w_UseClause(ref => d);

   match TypeExpr ()
   wrap w_TypeExpr ();

   match NumberDecl ()
   wrap w_NumberDecl();

   match ObjectDecl ()
   wrap w_ObjectDecl();

   match DefiningName () do
      match parent (PackageDecl ())
      wrap w_DefiningName (name => @ & "\e<self>_Wrapped");

      match parent (BasicDecl () and parent (PackageDecl ()))
      wrap w_DefiningName (name => @ & "\e<self>");
   end;

   # TODO use to_lower ().filter () here in order to accept all casing for
   # convention
   match AspectAssoc (f_id ("Convention")) and parent (TypeDecl ()) do
      wrap w_Aspect (self);

      match f_expr ("C_Pass_By_Copy")
      wrap w_Aspect ("Convention => C");
   end;
end;

template wrappers_post_process pick origin do
   match sb: w_SubpDeclCall () 
      and parent (p : w_PackageDecl ())
   do   
      match subp_kind ("function")
      weave (return_spec => "return \e<result_type_expr>");

      match origin (v: p_fully_qualified_name ())
      weave (call_name => v);

      match child (w_ParamSpecCall(not generate_formal ("NO")))
      weave (lparenSpec => "(", rparenSpec => ")");

      match child (c: w_ParamSpecCall())
      weave (lparenCall => "(", rparenCall => ")");

      match not origin (AccessToSubpDef ()) 
      pick p weave (spec_content => @ & sb.spec & "\n\n", body_content => @ & sb.body);

      match child (w_Aspect ()) do
         weave (spec => i"""
            \e<profile> with 
               \e<child (a: w_Aspect ()).fold ("", @ & a.txt, @ & ",\n")>;""");
      else
         weave (spec => profile & ";");
      end;
   end;

   match sb: w_SubpDeclCallback() 
      and parent (p : w_PackageDecl ()) 
   do   
      match subp_kind ("function")
      weave (return_spec => "return \e<result_type_expr>");

      match v: origin.p_fully_qualified_name ()
      weave (call_name => v);
      
      weave (call => "\e<call_name> \e<lparenCall> \e<call_assoc_list> \e<rparenCall>");

      match child (w_ParamSpecCallback (not generate_formal ("NO")))
      weave (lparenSpec => "(", rparenSpec => ")");

      match child (c: w_ParamSpecCallback())
      weave (lparenCall => "(", rparenCall => ")");
   end;

   match p: w_ParamSpecCall() and parent (s: w_SubpDeclCall()) do
      match not generate_formal ("NO") do
         match prev (w_ParamSpecCall (not generate_formal ("NO"))) do
            weave (
               formal_text => @ & "; \e<name> : \e<mode> \e<type_expr>");
         else 
            weave (
               formal_text => @ & "\e<name> : \e<mode> \e<type_expr>");
         end;
      end;

      match prev (w_ParamSpecCall ()) do
         weave (actual_text => @ & ", \e<actual_value>");
      else 
         weave (actual_text => @ & "\e<actual_value>");
      end;

      pick s weave (
         param_spec_list  => @ & p.formal_text,
         pre_call_decl    => @ & p.pre_call_decl,
         pre_call_stmt    => @ & p.pre_call_stmt,
         call_decl        => @ & p.call_decl,
         call_stmt        => @ & p.call_stmt,
         call_assoc_list  => @ & p.actual_text,
         post_call_decl   => @ & p.post_call_decl,
         post_call_stmt   => @ & p.post_call_stmt,
         return_stmt      => @ & p.return_stmt,
         result_type_expr => (match text (p.result_type_expr, "_") pick @ else pick p.result_type_expr)
      );
   end;

   match p: w_ParamSpecCallback() and parent (s: w_SubpDeclCallback()) do
      match not generate_formal ("NO") do
         match prev (w_ParamSpecCallback (not generate_formal ("NO"))) do
            weave (
               formal_text => @ & "; \e<name> : \e<mode> \e<type_expr>");
         else 
            weave (
               formal_text => @ & "\e<name> : \e<mode> \e<type_expr>");
         end;
      end;

      match prev (w_ParamSpecCallback ()) do
         weave (actual_text => @ & ", \e<actual_value>");
      else 
         weave (actual_text => @ & "\e<actual_value>");
      end;

      pick s weave (
         param_spec_list  => @ & p.formal_text,
         pre_call_decl    => @ & p.pre_call_decl,
         pre_call_stmt    => @ & p.pre_call_stmt,
         call_decl        => @ & p.call_decl,
         call_stmt        => @ & p.call_stmt,
         call_assoc_list  => @ & p.actual_text,
         post_call_decl   => @ & p.post_call_decl,
         post_call_stmt   => @ & p.post_call_stmt,
         return_stmt      => @ & p.return_stmt,
         result_type_expr => (match text (p.result_type_expr, "_") pick @ else pick p.result_type_expr)
      );
   end;

   match s: w_ObjectDecl() and parent (p : w_PackageDecl()) and child (te: w_TypeExpr ())
   pick p weave (spec_content => @ & "\e<s.name> : \e<te.txt>;\n");

   match s: w_ComponentDecl () and parent (t: w_TypeDecl ()) and child (te: w_TypeExpr ())
   pick t weave (
      content_definition => @ & "\e<s.name> : \e<te.txt>;\n"
   );

   match s: w_EnumLiteralDecl() and parent (p: w_TypeDecl ()) do
      match prev (w_EnumLiteralDecl ()) do
         pick p weave (content_definition => @ & ", \e<s.name>");
      else
         pick p weave (content_definition => @ & "\e<s.name>");
      end;
   end;

   match e: w_EnumRep() and parent (p: w_TypeDecl ()) do
      match prev (w_EnumRep()) do
         pick p weave (rep_definition => @ & ", \e<e.name> => \e<e.value>\n"); 
      else 
         pick p weave (rep_definition => @ & "\e<e.name> => \e<e.value>\n");
      end;
   end;

   match w: w_Aspect() and parent (p: w_TypeDecl ()) do
      match prev (w_Aspect ()) do
         pick p weave (aspects_declaration => @ & ", \e<w.txt>\n"); 
      else 
         pick p weave (aspects_declaration => @ & "\n with \e<w.txt>\n");
      end;
   end;

   match top: w_TypeDecl () do
      match origin (t: child (TypeAccessDef ())) do
         weave (definition => @ & " access \e<child (w_TypeExpr ()).txt>");
      elsmatch origin (t: child (DerivedTypeDef ())) do
         weave (definition => @ & "new \e<child (w_TypeExpr ()).txt>");
      elsmatch origin (
            t: child (ArrayTypeDef (
            i: child (UnconstrainedArrayIndex () or ConstrainedArrayIndices)))) 
      do
         match i (UnconstrainedArrayIndex ()) and i.child (wrapper (w1 : w_TypeExpr ())) do
            weave (definition => @ & "array (\e<w1.txt> range <>) of \e<child (w_TypeExpr ()).txt>");
         else
            weave (definition => @ & "array (\e<t.child(ConstraintList ())>) of \e<child (w_TypeExpr ()).txt>");
         end;
      elsmatch origin (child (AccessToSubpDef ())) do
         match origin (child (t: TypeDef ())) 
         weave (definition => @ & "\e<t>");

         match child (cl: w_SubpDeclCall ()) and child (cb: w_SubpDeclCallback ()) 
            and parent (p: w_PackageDecl()) 
            and ncall: top.tmp ("Call")
         do 
            pick cl weave (name => ncall);
            pick cb weave (
               name => top.name & "_Gen", 
               call_name => ncall);

            pick p weave (
               spec_content => @ & i"""
                  generic 
                     with \e<cl.profile>;
                  \e<cb.profile>;""",
               body_content => @ & """\e<cb.body>""");
         end;
      elsmatch origin (child (RecordTypeDef ())) do
         match child (w_ComponentDecl()) do
            weave (definition => @ & i"""
               record
                  \e<content_definition>
               end record""");
         else
            weave (definition => @ & "null record");
         end;
      elsmatch type_kind ("enumeration") do # TODO: this whole test should be using enumeration instead
         weave (definition => @ & "(\e<content_definition>)");
      elsmatch origin (child (t: TypeDef ())) do
         weave (definition => @ & "\e<t>");
      elsmatch child (t: w_TypeExpr()) do
         weave (definition => @ & "\e<t.txt>");
      end;

      match child (w_EnumRep ())
      weave (rep_declaration => @ & "for \e<name> use (\n\e<rep_definition>\n);\n");
      
      match s: self () and not parent (w_TypeExpr ()) and parent (p: w_PackageDecl())
      pick p weave (spec_content => @ & s.declaration & "\n");
   end;

   match s: w_TypeExpr (o: origin (child (Identifier ())))
   weave (txt => build_type_expr (self.origin ()));
    
   match p: w_PackageDecl (parent (u: w_Unit ())) do
      pick u weave (
         spec => @ & p.spec,
         body => @ & p.body
      );
    
      match p.origin ()
      pick u weave (
         body_with_clauses => @ & "with \e<p.original_name>;\n",
         body_use_clauses => @ & "use \e<p.original_name>;\n"
      );
   end;

   match ((w: w_WithClause () and c: has ("with")) or (w: w_UseClause () and c: has ("use")))
      and parent (u: w_Unit ())
   do
      match origin (child (r: Name()))
        and (r.p_referenced_decl ().wrapper (child (n: w_DefiningName ()))) 
      do
         pick u weave (
            spec_with_clauses => @ & "\e<c> \e<n.name>; \e<c> \e<w.ref>;\n");
      else 
         pick u weave (
            spec_with_clauses => @ & "\e<c> \e<w.ref>;\n"
         );
      end;
   end;
   
   match w_Unit () and child (p: w_PackageDecl ()) do
      wrap spec_file
         (path => defer (replace_text (to_lower (p.name), "\\.", "-")) & ".ads", content => self.spec_text);

      match child (w_SubpDecl ()) or p (elaborate_body (x".+"))
      wrap body_file 
         (path => defer (replace_text (to_lower (p.name), "\\.", "-")) & ".adb", content => self.body_text);
   end;
end;

template wrap_ada_specs do
   wrap null (wrap_ada_specs);

   pick origin do
      match AdaNode () wrap ada_to_wrappers ();
      match w_Ada () wrap wrappers_post_process ();
   end;
end;
